# Supprimer la ligne ci-dessous si vous voulez hériter les paramètres .editorconfig des répertoires supérieurs
root = true

[*]
indent_style = space
end_of_line = crlf
# Ne pas spécifier l'indentation à ce niveau!

# Pour tous les fichiers de code par défaut
[*.{cs,vb}]
indent_size = 4
insert_final_newline = false
charset = utf-8
tab_width = 4

# Visual Studio Solution Files
[*.sln]
indent_style = tab

# Visual Studio XML Project Files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML Configuration Files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct,xml,stylecop}]
indent_size = 2

# JSON Files
[*.{json,json5,webmanifest}]
indent_size = 2

# YAML Files
[*.{yml,yaml}]
indent_size = 2

# Markdown Files
[*.{md,mdx}]
trim_trailing_whitespace = false
indent_size = 2

# Bash Files
[*.sh]
indent_size = 2
end_of_line = lf

# Batch Files
[*.{cmd,bat}]
indent_size = 2

# Powershell files
[*.ps1]
indent_size = 2

# Web Files
[*.{htm,html,js,jsm,ts,tsx,cjs,cts,ctsx,mjs,mts,mtsx,css,sass,scss,less,pcss,svg,vue}]
indent_size = 2

#### Conventions de codage .NET ####
[*.{cs,vb}]

# Organiser les instructions Using
dotnet_sort_system_directives_first = false
dotnet_separate_import_directive_groups = false
file_header_template = unset

# Préférences de this. et Me.
dotnet_style_qualification_for_field = false:refactoring
dotnet_style_qualification_for_property = false:refactoring
dotnet_style_qualification_for_method = false:refactoring
dotnet_style_qualification_for_event = false:refactoring

# Préférences des mots clés de langage par rapport aux types BCL
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Suggest more modern language features when available
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_namespace_match_folder = true:warning

# Préférences de nouvelle ligne
dotnet_style_allow_multiple_blank_lines_experimental = false:suggestion
dotnet_style_allow_statement_immediately_after_block_experimental = false:suggestion

# Naming rules

dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.symbols = types_and_namespaces
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.interfaces_should_be_ipascalcase.severity = suggestion
dotnet_naming_rule.interfaces_should_be_ipascalcase.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_ipascalcase.style = ipascalcase

dotnet_naming_rule.type_parameters_should_be_tpascalcase.severity = suggestion
dotnet_naming_rule.type_parameters_should_be_tpascalcase.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_tpascalcase.style = tpascalcase

dotnet_naming_rule.methods_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.methods_should_be_pascalcase.symbols = methods
dotnet_naming_rule.methods_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.properties_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.properties_should_be_pascalcase.symbols = properties
dotnet_naming_rule.properties_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.events_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.events_should_be_pascalcase.symbols = events
dotnet_naming_rule.events_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_variables_should_be_camelcase.severity = suggestion
dotnet_naming_rule.local_variables_should_be_camelcase.symbols = local_variables
dotnet_naming_rule.local_variables_should_be_camelcase.style = camelcase

dotnet_naming_rule.local_constants_should_be_camelcase.severity = suggestion
dotnet_naming_rule.local_constants_should_be_camelcase.symbols = local_constants
dotnet_naming_rule.local_constants_should_be_camelcase.style = camelcase

dotnet_naming_rule.parameters_should_be_camelcase.severity = suggestion
dotnet_naming_rule.parameters_should_be_camelcase.symbols = parameters
dotnet_naming_rule.parameters_should_be_camelcase.style = camelcase

dotnet_naming_rule.public_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_fields_should_be_pascalcase.symbols = public_fields
dotnet_naming_rule.public_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_fields_should_be__camelcase.severity = suggestion
dotnet_naming_rule.private_fields_should_be__camelcase.symbols = private_fields
dotnet_naming_rule.private_fields_should_be__camelcase.style = _camelcase

dotnet_naming_rule.private_static_fields_should_be_s_camelcase.severity = suggestion
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.symbols = private_static_fields
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.style = s_camelcase

dotnet_naming_rule.public_constant_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.symbols = public_constant_fields
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_constant_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.symbols = private_constant_fields
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.symbols = public_static_readonly_fields
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.symbols = private_static_readonly_fields
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.enums_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.enums_should_be_pascalcase.symbols = enums
dotnet_naming_rule.enums_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_functions_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascalcase.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.non_field_members_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascalcase.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascalcase.style = pascalcase

# Symbol specifications

dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interfaces.required_modifiers = 

dotnet_naming_symbols.enums.applicable_kinds = enum
dotnet_naming_symbols.enums.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.enums.required_modifiers = 

dotnet_naming_symbols.events.applicable_kinds = event
dotnet_naming_symbols.events.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.events.required_modifiers = 

dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.methods.required_modifiers = 

dotnet_naming_symbols.properties.applicable_kinds = property
dotnet_naming_symbols.properties.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.properties.required_modifiers = 

dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_fields.required_modifiers = 

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_fields.required_modifiers = 

dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_fields.required_modifiers = static

dotnet_naming_symbols.types_and_namespaces.applicable_kinds = namespace, class, struct, interface, enum
dotnet_naming_symbols.types_and_namespaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types_and_namespaces.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

dotnet_naming_symbols.type_parameters.applicable_kinds = namespace
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *
dotnet_naming_symbols.type_parameters.required_modifiers = 

dotnet_naming_symbols.private_constant_fields.applicable_kinds = field
dotnet_naming_symbols.private_constant_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_constant_fields.required_modifiers = const

dotnet_naming_symbols.local_variables.applicable_kinds = local
dotnet_naming_symbols.local_variables.applicable_accessibilities = local
dotnet_naming_symbols.local_variables.required_modifiers = 

dotnet_naming_symbols.local_constants.applicable_kinds = local
dotnet_naming_symbols.local_constants.applicable_accessibilities = local
dotnet_naming_symbols.local_constants.required_modifiers = const

dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers = 

dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_constant_fields.required_modifiers = const

dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_readonly_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_symbols.local_functions.applicable_accessibilities = *
dotnet_naming_symbols.local_functions.required_modifiers = 

# Naming styles

dotnet_naming_style.pascalcase.required_prefix = 
dotnet_naming_style.pascalcase.required_suffix = 
dotnet_naming_style.pascalcase.word_separator = 
dotnet_naming_style.pascalcase.capitalization = pascal_case

dotnet_naming_style.ipascalcase.required_prefix = I
dotnet_naming_style.ipascalcase.required_suffix = 
dotnet_naming_style.ipascalcase.word_separator = 
dotnet_naming_style.ipascalcase.capitalization = pascal_case

dotnet_naming_style.tpascalcase.required_prefix = T
dotnet_naming_style.tpascalcase.required_suffix = 
dotnet_naming_style.tpascalcase.word_separator = 
dotnet_naming_style.tpascalcase.capitalization = pascal_case

dotnet_naming_style._camelcase.required_prefix = _
dotnet_naming_style._camelcase.required_suffix = 
dotnet_naming_style._camelcase.word_separator = 
dotnet_naming_style._camelcase.capitalization = camel_case

dotnet_naming_style.camelcase.required_prefix = 
dotnet_naming_style.camelcase.required_suffix = 
dotnet_naming_style.camelcase.word_separator = 
dotnet_naming_style.camelcase.capitalization = camel_case

dotnet_naming_style.s_camelcase.required_prefix = s_
dotnet_naming_style.s_camelcase.required_suffix = 
dotnet_naming_style.s_camelcase.word_separator = 
dotnet_naming_style.s_camelcase.capitalization = camel_case

#### Conventions de codage .NET ####

# Préférences de parenthèses
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity

# Préférences de modificateur
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Préférences de niveau expression
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_collection_expression = when_types_loosely_match:suggestion
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion
dotnet_style_prefer_conditional_expression_over_return = false:suggestion
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_simplified_boolean_expressions = false:silent
dotnet_style_prefer_simplified_interpolation = true:warning

# Préférences de champ
dotnet_style_readonly_field = true

# Préférences de paramètre
dotnet_code_quality_unused_parameters = all

# Préférences de suppression
dotnet_remove_unnecessary_suppression_exclusions = none

#### Conventions de codage C# ####

# Préférences de modificateur
csharp_prefer_static_local_function = true
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async
csharp_style_prefer_readonly_struct = true
csharp_style_prefer_readonly_struct_member = true

# Préférences de bloc de code
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_namespace_declarations = file_scoped:suggestion
csharp_style_prefer_method_group_conversion = true:suggestion
csharp_style_prefer_primary_constructors = false:none
csharp_style_prefer_top_level_statements = true:suggestion

# Préférences de niveau expression
csharp_prefer_simple_default_expression = true
csharp_style_deconstructed_variable_declaration = true
csharp_style_implicit_object_creation_when_type_is_apparent = true
csharp_style_prefer_index_operator = true
csharp_style_prefer_local_over_anonymous_function = true
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_prefer_range_operator = true
csharp_style_prefer_tuple_swap = true
csharp_style_prefer_utf8_string_literals = true
csharp_style_unused_value_assignment_preference = discard_variable
csharp_style_unused_value_expression_statement_preference = discard_variable

# Préférences pour la directive 'using'
csharp_using_directive_placement = outside_namespace:suggestion

#### Règles de formatage C# ####

[*.cs]

# Préférences de nouvelle ligne
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Préférences de mise en retrait
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# Préférences de nouvelle ligne
csharp_style_allow_embedded_statements_on_same_line_experimental = false:suggestion
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:suggestion
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:suggestion
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true:suggestion
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true:suggestion

# Préférences de var
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Préférez les constructions de type méthode pour avoir un corps de bloc
csharp_style_expression_bodied_methods = when_on_single_line:suggestion
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = when_on_single_line:suggestion
csharp_style_expression_bodied_local_functions = false:suggestion

#Préférez les constructions de type propriété pour avoir un corps d'expression
csharp_style_expression_bodied_properties = when_on_single_line:suggestion
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion
csharp_style_expression_bodied_lambdas = when_on_single_line:suggestion


# Préférences correspondants au modèle
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion

# Préférences d'espace
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Préférences d'enveloppement
csharp_prefer_braces = true:suggestion
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

## Ajustements du niveau de sévérité

# Inline variable declaration
dotnet_diagnostic.IDISP018.severity = error

# Use pattern matching to avoid is check followed by a cast (with variable)
dotnet_diagnostic.IDISP020.severity = error

# Member should not return created and cached instance
dotnet_diagnostic.IDISP015.severity = error

# Use a single instance of HttpClient
dotnet_diagnostic.IDISP014.severity = warning

# Await in using
dotnet_diagnostic.IDISP013.severity = error

# Namespace does not match folder structure
dotnet_diagnostic.IDE0130.severity = warning

# Don't dispose injected
dotnet_diagnostic.IDISP007.severity = error

# RemoveUnnecessaryCode
dotnet_diagnostic.SA1409.severity = error

# StatementMustNotUseUnnecessaryParenthesis
dotnet_diagnostic.SA1119.severity = suggestion

# FileMayOnlyContainASingleNamespace
dotnet_diagnostic.SA1403.severity = error

# Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1512.severity = warning

# Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = error

# Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = warning

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# csharp_style_allow_embedded_statements_on_same_line_experimental
dotnet_diagnostic.IDE2001.severity = warning

# csharp_style_allow_blank_lines_between_consecutive_braces_experimental
dotnet_diagnostic.IDE2002.severity = warning

# csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental
dotnet_diagnostic.IDE2004.severity = warning

# csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental
dotnet_diagnostic.IDE2005.severity = warning

# csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental
dotnet_diagnostic.IDE2006.severity = warning

# SIMPLIFY LINQ EXPRESSIONS
# https://dotnettips.wordpress.com/2023/11/21/microsoft-net-code-analysis-simplify-linq-expressions/
dotnet_diagnostic.IDE0120.severity = warning

# UTILIZE THE PATTERN MATCHING ‘NOT’ OPERATOR
# https://dotnettips.wordpress.com/2023/11/21/microsoft-net-code-analysis-utilize-the-pattern-matching-not-operator/
dotnet_diagnostic.IDE0083.severity = warning

# UTILIZE PATTERN MATCHING TO ELIMINATE THE NEED FOR AN ‘IS’ CHECK
# https://dotnettips.wordpress.com/2023/11/14/microsoft-net-code-analysis-utilize-pattern-matching-to-eliminate-the-need-for-an-is-check/
dotnet_diagnostic.IDE0020.severity = warning
dotnet_diagnostic.IDE0038.severity = warning

# USE NAMEOF() TO RETRIEVE THE PARAMETER NAME
# https://dotnettips.wordpress.com/2023/11/07/microsoft-net-code-analysis-use-nameof-to-retrieve-the-parameter-name/
dotnet_diagnostic.IDE0082.severity = warning
dotnet_diagnostic.IDE0280.severity = warning
dotnet_diagnostic.CA1507.severity = warning

# CONSIDER USING STRING.CONTAINS() INSTEAD OF STRING.INDEXOF()
# https://dotnettips.wordpress.com/2023/10/25/microsoft-net-code-analysis-consider-using-string-contains-instead-of-string-indexof/
dotnet_diagnostic.CA2249.severity = warning

# REMOVE UNNECESSARY LAMBDA EXPRESSIONS
# https://dotnettips.wordpress.com/2023/10/18/microsoft-net-code-analysis-remove-unnecessary-lambda-expressions/
dotnet_diagnostic.IDE0200.severity = warning

# USE STRING.METHOD(CHAR) INSTEAD OF STRING.METHOD(STRING) FOR STRING WITH SINGLE CHARACTER
# https://dotnettips.wordpress.com/2023/09/27/microsoft-net-code-analysis-use-string-methodchar-instead-of-string-methodstring-for-string-with-single-character/
dotnet_diagnostic.CA1865.severity = warning
dotnet_diagnostic.CA1866.severity = warning
dotnet_diagnostic.CA1867.severity = warning

# RETRIEVING A SUBSTRING
# https://dotnettips.wordpress.com/2024/01/22/string-performance-microsoft-net-retrieving-a-substring/
dotnet_diagnostic.CA1836.severity = warning

# CONVERTING BYTE ARRAY TO SPAN<BYTE>
# https://dotnettips.wordpress.com/2024/01/23/collection-performance-in-microsoft-net-converting-byte-array-to-spanbyte/
dotnet_diagnostic.CA1833.severity = error

# COMPARING STRINGS WITH GLOBALIZATION
# String Performance: Comparing Strings with Globalization – dotNetTips.com (wordpress.com)
dotnet_diagnostic.CA1862.severity = warning

# AVOID ZERO-LENGTH ARRAY ALLOCATION
# https://dotnettips.wordpress.com/2024/02/19/collection-performance-in-microsoft-net-avoid-zero-length-array-allocations/
dotnet_diagnostic.CA1825.severity = warning

## Ajustements du niveau de sévérité pour la nomenclature

# Do not name enum values 'Reserved'
dotnet_diagnostic.CA1700.severity = warning
dotnet_code_quality.CA1700.api_surface = public, protected

# Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = warning

# Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = warning

# Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = error

# Events should not have before or after prefix
dotnet_diagnostic.CA1713.severity = warning

# Flags enums should have plural names
dotnet_diagnostic.CA1714.severity = error

# Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = error

# Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = warning
dotnet_code_quality.CA1716.analyzed_symbol_kinds = NamedType, Method, Property, Event

# Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1717.severity = error

# Identifiers should not contain type names
dotnet_diagnostic.CA1720.severity = warning

# Property names should not match get methods
dotnet_diagnostic.CA1721.severity = error

# Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = warning

# Use PascalCase for named placeholders
dotnet_diagnostic.CA1727.severity = warning

## Ajustements du niveau de la performance
dotnet_diagnostic.CA1859.severity = none

# Use Literals Where Appropriate
dotnet_diagnostic.CA1802.severity = warning

# Do not initialize unnecessarily.
dotnet_diagnostic.CA1805.severity = error

# Avoid unsealed attributes ****!
dotnet_diagnostic.CA1813.severity = suggestion

# Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = warning

# Use property instead of Linq Enumerable method ****!
dotnet_diagnostic.CA1826.severity = error

# Do not use Count/LongCount when Any can be used ****!
dotnet_diagnostic.CA1827.severity = suggestion

# Do not use CountAsync/LongCountAsync when AnyAsync can be used ****!
dotnet_diagnostic.CA1828.severity = suggestion

# Use Length/Count property instead of Enumerable.Count method ****!
dotnet_diagnostic.CA1829.severity = error

# Prefer strongly-typed Append and Insert method overloads on StringBuilder. ****!
dotnet_diagnostic.CA1830.severity = warning

# Use AsSpan instead of Range-based indexers for string when appropriate ****!
dotnet_diagnostic.CA1831.severity = error

# Use AsSpan or AsMemory instead of Range-based indexers for getting ReadOnlySpan or ReadOnlyMemory portion of an array ****!
dotnet_diagnostic.CA1832.severity = warning

# Use StringBuilder.Append(char) for single character strings ****!
dotnet_diagnostic.CA1834.severity = warning

# Prefer the memory-based overloads of ReadAsync/WriteAsync methods in stream-based classes ****!
dotnet_diagnostic.CA1835.severity = warning

# Prefer Dictionary Contains methods ****!
dotnet_diagnostic.CA1841.severity = warning

# Do not use 'WhenAll' with a single task ****
dotnet_diagnostic.CA1842.severity = error

# Do not use 'WaitAll' with a single task ****
dotnet_diagnostic.CA1843.severity = error

# Provide memory-based overrides of async methods when subclassing 'Stream' ****
dotnet_diagnostic.CA1844.severity = warning

# Use span-based 'string.Concat' ****
dotnet_diagnostic.CA1845.severity = warning

# Prefer AsSpan over Substring ****!
dotnet_diagnostic.CA1846.severity = warning

# Use string.Contains(char) instead of string.Contains(string) with single character ****!
# https://dotnettips.wordpress.com/2024/04/03/string-performance-checking-for-a-character/
dotnet_diagnostic.CA1847.severity = error

# Use the LoggerMessage delegates  ****!
dotnet_diagnostic.CA1848.severity = warning

# Call async methods when in an async method ****
dotnet_diagnostic.CA1849.severity = error

# Prefer static HashData method over ComputeHash ****!
dotnet_diagnostic.CA1850.severity = error

# Possible multiple enumerations of IEnumerable collection ****
dotnet_diagnostic.CA1851.severity = warning

# Seal internal types ***!
dotnet_diagnostic.CA1852.severity = error

# Unnecessary call to 'Dictionary.ContainsKey(key)' ****!
dotnet_diagnostic.CA1853.severity = error

# Prefer the IDictionary.TryGetValue(TKey, out TValue) method!
dotnet_diagnostic.CA1854.severity = error

# Use Span<T>.Clear() instead of Span<T>.Fill()  ****!
dotnet_diagnostic.CA1855.severity = error

# Incorrect usage of ConstantExpected attribute ****!
dotnet_diagnostic.CA1856.severity = warning

# A constant is expected for the parameter ****!
dotnet_diagnostic.CA1857.severity = warning

# Use StartsWith instead of IndexOf ****!
dotnet_diagnostic.CA1858.severity = error

# Avoid using 'Enumerable.Any()' extension method ****!
dotnet_diagnostic.CA1860.severity = error

# Avoid constant arrays as arguments
dotnet_diagnostic.CA1861.severity = none

# Use 'CompositeFormat' ****!
dotnet_diagnostic.CA1863.severity = warning

# Prefer the 'IDictionary.TryAdd(TKey, TValue)' method ****!
dotnet_diagnostic.CA1864.severity = suggestion

# Unnecessary call to 'Contains' for sets ****
dotnet_diagnostic.CA1868.severity = error

# Cache and reuse 'JsonSerializerOptions' instances ****
dotnet_diagnostic.CA1869.severity = warning

# Use a cached 'SearchValues' instance ****
dotnet_diagnostic.CA1870.severity = warning

# Use Span<T>.Clear() instead of Span<T>.Fill()  ****
dotnet_analyzer_diagnostic.category-Performance.severity = error

# The UTF-7 encoding is insecure
dotnet_diagnostic.SYSLIB0001.severity = error

# Retrieving the process Id
# https://dotnettips.wordpress.com/2024/03/15/general-performance-tips-for-microsoft-net-retrieving-the-process-path/
dotnet_diagnostic.CA1837.severity = error

# Thread Id retrival methods
# https://dotnettips.wordpress.com/2024/03/21/code-it-any-way-you-want-exploring-thread-id-retrieval-methods/
dotnet_diagnostic.CA1840.severity = suggestion

## Ajustements pour les éléments obsolets

# PrincipalPermissionAttribute is obsolete
dotnet_diagnostic.SYSLIB0002.severity = error

# Code access security is not supported
dotnet_diagnostic.SYSLIB0003.severity = error

# The constrained execution region (CER) feature is not supported
dotnet_diagnostic.SYSLIB0004.severity = error

# The global assembly cache (GAC) is not supported
dotnet_diagnostic.SYSLIB0005.severity = error

# Thread.Abort is not supported
dotnet_diagnostic.SYSLIB0006.severity = error

# Default implementations of cryptography algorithms not supported
dotnet_diagnostic.SYSLIB0007.severity = error

# CreatePdbGenerator is not supported
dotnet_diagnostic.SYSLIB0008.severity = error

# The AuthenticationManager Authenticate and PreAuthenticate methods are not supported
dotnet_diagnostic.SYSLIB0009.severity = error

# Unsupported remoting APIs
dotnet_diagnostic.SYSLIB0010.severity = error

# BinaryFormatter serialization is obsolete
dotnet_diagnostic.SYSLIB0011.severity = error

# Type or member is obsolete
dotnet_diagnostic.SYSLIB0012.severity = error

# EscapeUriString is obsolete
dotnet_diagnostic.SYSLIB0013.severity = error

# WebRequest, HttpWebRequest, ServicePoint, WebClient are obsolete
dotnet_diagnostic.SYSLIB0014.severity = error

# DisablePrivateReflectionAttribute is obsolete
dotnet_diagnostic.SYSLIB0015.severity = error

# GetContextInfo() is obsolete
dotnet_diagnostic.SYSLIB0016.severity = error

# Strong-name signing is not supported and throws PlatformNotSupportedException
dotnet_diagnostic.SYSLIB0017.severity = error

# Reflection-only loading is not supported and throws PlatformNotSupportedException
dotnet_diagnostic.SYSLIB0018.severity = error

# Some RuntimeEnvironment APIs are obsolete
dotnet_diagnostic.SYSLIB0019.severity = error

# IgnoreNullValues is obsolete
dotnet_diagnostic.SYSLIB0020.severity = error

# Derived cryptographic types are obsolete
dotnet_diagnostic.SYSLIB0021.severity = error

# The Rijndael and RijndaelManaged types are obsolete
dotnet_diagnostic.SYSLIB0022.severity = error

# RNGCryptoServiceProvider is obsolete
dotnet_diagnostic.SYSLIB0023.severity = error

# Creating and unloading AppDomains is not supported and throws an exception
dotnet_diagnostic.SYSLIB0024.severity = error

# SuppressIldasmAttribute is obsolete
dotnet_diagnostic.SYSLIB0025.severity = error

# X509Certificate and X509Certificate2 are immutable
dotnet_diagnostic.SYSLIB0026.severity = error

# PublicKey.Key is obsolete
dotnet_diagnostic.SYSLIB0027.severity = error

# X509Certificate2.PrivateKey is obsolete
dotnet_diagnostic.SYSLIB0028.severity = error

# ProduceLegacyHmacValues is obsolete
dotnet_diagnostic.SYSLIB0029.severity = error

# HMACSHA1 always uses the algorithm implementation provided by the platform
dotnet_diagnostic.SYSLIB0030.severity = error

# EncodeOID is obsolete
dotnet_diagnostic.SYSLIB0031.severity = error

# Recovery from corrupted process state exceptions is not supported
dotnet_diagnostic.SYSLIB0032.severity = error

# Rfc2898DeriveBytes.CryptDeriveKey is obsolete
dotnet_diagnostic.SYSLIB0033.severity = error

# CmsSigner(CspParameters) constructor is obsolete
dotnet_diagnostic.SYSLIB0034.severity = error

# ComputeCounterSignature without specifying a CmsSigner is obsolete
dotnet_diagnostic.SYSLIB0035.severity = error

# Regex.CompileToAssembly is obsolete
dotnet_diagnostic.SYSLIB0036.severity = error

# AssemblyName members HashAlgorithm, ProcessorArchitecture, and VersionCompatibility are obsolete
dotnet_diagnostic.SYSLIB0037.severity = error

# SerializationFormat.Binary is obsolete
dotnet_diagnostic.SYSLIB0038.severity = error

# SslProtocols.Tls and SslProtocols.Tls11 are obsolete
dotnet_diagnostic.SYSLIB0039.severity = error

# EncryptionPolicy.NoEncryption and EncryptionPolicy.AllowNoEncryption are obsolete
dotnet_diagnostic.SYSLIB0040.severity = error

# Some Rfc2898DeriveBytes constructors are obsolete
dotnet_diagnostic.SYSLIB0041.severity = error

# FromXmlString and ToXmlString on ECC types are obsolete
dotnet_diagnostic.SYSLIB0042.severity = error

# ECDiffieHellmanPublicKey.ToByteArray is obsolete
dotnet_diagnostic.SYSLIB0043.severity = error

# AssemblyName.CodeBase and AssemblyName.EscapedCodeBase are obsolete
dotnet_diagnostic.SYSLIB0044.severity = error

# Some cryptographic factory methods are obsolete
dotnet_diagnostic.SYSLIB0045.severity = error

# ControlledExecution.Run should not be used
dotnet_diagnostic.SYSLIB0046.severity = error

# XmlSecureResolver is obsolete
dotnet_diagnostic.SYSLIB0047.severity = error

# RSA.EncryptValue and DecryptValue are obsolete
dotnet_diagnostic.SYSLIB0048.severity = error

# Formatter-based serialization is obsolete
dotnet_diagnostic.SYSLIB0050.severity = error

# Legacy serialization support APIs are obsolete
dotnet_diagnostic.SYSLIB0051.severity = error

# APIs that support obsolete mechanisms for Regex extensibility are obsolete
dotnet_diagnostic.SYSLIB0052.severity = error

# AesGcm should indicate the required tag size
dotnet_diagnostic.SYSLIB0053.severity = warning

# Logging method names can't start with an underscore
dotnet_diagnostic.SYSLIB1001.severity = error

# Don't include log level parameters as templates in the logging message
dotnet_diagnostic.SYSLIB1002.severity = error

# Logging method parameter names can't start with an underscore
dotnet_diagnostic.SYSLIB1003.severity = error

# Could not find a required type definition
dotnet_diagnostic.SYSLIB1005.severity = error

# Multiple logging methods cannot use the same event ID
dotnet_diagnostic.SYSLIB1006.severity = error

# Logging methods must return void
dotnet_diagnostic.SYSLIB1007.severity = error

# One of the arguments to a logging method must implement the ILogger interface
dotnet_diagnostic.SYSLIB1008.severity = error

# Logging methods must be static
dotnet_diagnostic.SYSLIB1009.severity = error

# Logging methods must be partial
dotnet_diagnostic.SYSLIB1010.severity = error

# Logging methods cannot be generic
dotnet_diagnostic.SYSLIB1011.severity = error

# Redundant qualifier in logging message
dotnet_diagnostic.SYSLIB1012.severity = error

# Don't include exception parameters as templates in the logging message
dotnet_diagnostic.SYSLIB1013.severity = error

# Logging template has no corresponding method argument
dotnet_diagnostic.SYSLIB1014.severity = error

# Argument is not referenced from the logging message
dotnet_diagnostic.SYSLIB1015.severity = error

# Logging methods cannot have a body
dotnet_diagnostic.SYSLIB1016.severity = error

# Don't include logger parameters as templates in the logging message
dotnet_diagnostic.SYSLIB1018.severity = error

# Couldn't find a field of type ILogger
dotnet_diagnostic.SYSLIB1019.severity = error

# Found multiple fields of type ILogger
dotnet_diagnostic.SYSLIB1020.severity = error

# Multiple message-template item names differ only by case
dotnet_diagnostic.SYSLIB1021.severity = error

# Can't have malformed format strings
dotnet_diagnostic.SYSLIB1022.severity = error

# Generating more than six arguments is not supported
dotnet_diagnostic.SYSLIB1023.severity = error

# System.Text.Json source generator did not generate output for type
dotnet_diagnostic.SYSLIB1030.severity = error

# System.Text.Json source generator encountered a duplicate type info property name
dotnet_diagnostic.SYSLIB1031.severity = error

# Context classes to be augmented by the System.Text.Json source generator must be declared as partial
dotnet_diagnostic.SYSLIB1032.severity = error

# System.Text.Json source generator encountered a type with multiple [JsonConstructor] annotations
dotnet_diagnostic.SYSLIB1033.severity = warning

# System.Text.Json source generator encountered a type with multiple [JsonExtensionData] annotations
dotnet_diagnostic.SYSLIB1035.severity = error

# System.Text.Json source generator encountered an invalid [JsonExtensionData] annotation
dotnet_diagnostic.SYSLIB1036.severity = error

# System.Text.Json source generator encountered a type with init-only properties which are not supported for deserialization
dotnet_diagnostic.SYSLIB1037.severity = error

# System.Text.Json source generator encountered a property annotated with [JsonInclude] but with inaccessible accessors
dotnet_diagnostic.SYSLIB1038.severity = error

# Invalid GeneratedRegexAttribute usage.
dotnet_diagnostic.SYSLIB1040.severity = error

# Multiple GeneratedRegexAttribute attributes were applied to the same method, but only one is allowed.
dotnet_diagnostic.SYSLIB1041.severity = error

# The specified regular expression is invalid.
dotnet_diagnostic.SYSLIB1042.severity = error

# A GeneratedRegexAttribute method must be partial, parameterless, non-generic, and non-abstract, and return Regex.
dotnet_diagnostic.SYSLIB1043.severity = error

# The regex generator couldn't generate a complete source implementation for the specified regular expression due to an internal limitation. See the explanation in the generated source for more details.
dotnet_diagnostic.SYSLIB1044.severity = error

# Use GeneratedRegexAttribute to generate the regular expression implementation at compile time.
dotnet_diagnostic.SYSLIB1045.severity = suggestion #CHANGE TO WARNING

# Invalid LibraryImportAttribute usage.
dotnet_diagnostic.SYSLIB1050.severity = error

# The specified type is not supported by source-generated p/invokes.
dotnet_diagnostic.SYSLIB1051.severity = error

# The specified configuration is not supported by source-generated p/invokes.
dotnet_diagnostic.SYSLIB1052.severity = error

# The specified LibraryImportAttribute arguments cannot be forwarded to DllImportAttribute.
dotnet_diagnostic.SYSLIB1053.severity = error

# Use LibraryImportAttribute instead of DllImportAttribute to generate p/invoke marshalling code at compile time.
dotnet_diagnostic.SYSLIB1054.severity = suggestion #SHOULD BE ERROR

# Invalid CustomMarshallerAttribute usage.
dotnet_diagnostic.SYSLIB1055.severity = error

# The specified native type is invalid.
dotnet_diagnostic.SYSLIB1056.severity = error

# The marshaller type does not have the required shape.
dotnet_diagnostic.SYSLIB1057.severity = error

# Invalid NativeMarshallingAttribute usage
dotnet_diagnostic.SYSLIB1058.severity = error

# The marshaller type does not support an allocating constructor.
dotnet_diagnostic.SYSLIB1059.severity = error

# The specified marshaller type is invalid.
dotnet_diagnostic.SYSLIB1060.severity = error

# The marshaller type has incompatible method signatures.
dotnet_diagnostic.SYSLIB1061.severity = error

# The project must be updated with <AllowUnsafeBlocks>true</AllowUnsafeBlocks>.
dotnet_diagnostic.SYSLIB1062.severity = error

# Invalid JSImportAttribute usage.
dotnet_diagnostic.SYSLIB1070.severity = error

# Invalid JSExportAttribute usage.
dotnet_diagnostic.SYSLIB1071.severity = error

# The specified type is not supported by source-generated JavaScript interop.
dotnet_diagnostic.SYSLIB1072.severity = error

# The specified configuration is not supported by source-generated JavaScript interop.
dotnet_diagnostic.SYSLIB1073.severity = error

# JSImportAttribute requires unsafe code.
dotnet_diagnostic.SYSLIB1074.severity = error

# JSExportAttribute requires unsafe code.
dotnet_diagnostic.SYSLIB1075.severity = error

# Invalid GeneratedComInterfaceAttribute usage.
dotnet_diagnostic.SYSLIB1090.severity = error

# Method is declared in different partial declaration than the GeneratedComInterface attribute. 
dotnet_diagnostic.SYSLIB1091.severity = error

# Type is not supported. 
dotnet_diagnostic.SYSLIB1100.severity = error

# Property on type is not supported.
dotnet_diagnostic.SYSLIB1101.severity = error

# Project's language version must be at least C# 11.
dotnet_diagnostic.SYSLIB1102.severity = error

dotnet_diagnostic.RemoveUnnecessaryImportsFixable.severity = warning

## Ajustements pour la fiabilité

# Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = error

# Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = suggestion

# Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = error

# Do not assign property within its setter
dotnet_diagnostic.CA2011.severity = error

# Use ValueTasks correctly
dotnet_diagnostic.CA2012.severity = error

# Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2013.severity = suggestion

# Do not use stackalloc in loops
dotnet_diagnostic.CA2014.severity = error

# Do not define finalizers for types derived from MemoryManager
dotnet_diagnostic.CA2015.severity = error

# Forward the CancellationToken parameter to methods that take one
dotnet_diagnostic.CA2016.severity = suggestion

# Parameter count mismatch
dotnet_diagnostic.CA2017.severity = error

# The count argument to Buffer.BlockCopy should specify the number of bytes to copy
dotnet_diagnostic.CA2018.severity = warning

# ThreadStatic fields should not use inline initialization
dotnet_diagnostic.CA2019.severity = error

# Prevent behavioral change caused by built-in operators of IntPtr/UIntPtr
dotnet_diagnostic.CA2020.severity = warning

# Do not call Enumerable.Cast<T> or Enumerable.OfType<T> with incompatible types
dotnet_diagnostic.CA2021.severity = warning

#### Language Rules ####

# Use 'System.HashCode.Combine' ****
dotnet_diagnostic.IDE0070.severity = warning

# Order modifiers
dotnet_diagnostic.IDE0036.severity = warning

# Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = error

# Format string contains invalid placeholder
dotnet_diagnostic.IDE0043.severity = warning

# Add readonly modifier
dotnet_diagnostic.IDE0044.severity = warning

# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0049.severity = warning

# Use index operator
dotnet_diagnostic.IDE0056.severity = suggestion

# Use range operator
dotnet_diagnostic.IDE0057.severity = suggestion

# Make local function static
dotnet_diagnostic.IDE0062.severity = suggestion

# Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = suggestion

# Simplify LINQ expression 
dotnet_diagnostic.IDE0120.severity = warning

# Make struct fields writable
dotnet_diagnostic.IDE0064.severity = suggestion

# Parentheses preferences
dotnet_diagnostic.IDE0047.severity = warning
dotnet_diagnostic.IDE0048.severity = warning
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

# Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = warning

# Use object initializers
dotnet_diagnostic.IDE0017.severity = suggestion

# Inline variable declaration
# https://dotnettips.wordpress.com/2024/03/25/code-it-any-way-you-want-performance-of-out-variable-declaration/
dotnet_diagnostic.IDE0018.severity = warning

# Use collection initializers
dotnet_diagnostic.IDE0028.severity = suggestion

# Use auto property
dotnet_diagnostic.IDE0032.severity = suggestion

# Use explicitly provided tuple name
dotnet_diagnostic.IDE0033.severity = suggestion

# Simplify 'default' expression
dotnet_diagnostic.IDE0034.severity = suggestion

# Use inferred member name
dotnet_diagnostic.IDE0037.severity = suggestion

# Use local function instead of lambda
dotnet_diagnostic.IDE0039.severity = suggestion

# Deconstruct variable declaration
dotnet_diagnostic.IDE0042.severity = suggestion

# Convert anonymous type to tuple
dotnet_diagnostic.IDE050.severity = suggestion

# Use compound assignment
dotnet_diagnostic.IDE0054.severity = suggestion
dotnet_diagnostic.IDE0074.severity = suggestion

# Simplify conditional expression
dotnet_diagnostic.IDE0075.severity = suggestion

# Convert typeof to nameof
dotnet_diagnostic.IDE0082.severity = warning

# Simplify new expression
dotnet_diagnostic.IDE0090.severity = suggestion

# Use throw expression
dotnet_diagnostic.IDE0016.severity = warning

# Use coalesce expression
dotnet_diagnostic.IDE0029.severity = suggestion

# Use coalesce expression (nullable types)
dotnet_diagnostic.IDE0030.severity = suggestion

# Use conditional expression for assignment
dotnet_diagnostic.IDE0045.severity = suggestion

# Use conditional expression for return
dotnet_diagnostic.IDE0046.severity = suggestion

dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = false:suggestion
dotnet_style_prefer_conditional_expression_over_return = false:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_simplified_boolean_expressions = false:silent
dotnet_style_prefer_simplified_interpolation = true:warning

# Null-checking preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# Use null propagation
dotnet_diagnostic.IDE0031.severity = suggestion

# Use is null check
dotnet_diagnostic.IDE0041.severity = suggestion

# Convert anonymous type to tuple
dotnet_diagnostic.IDE0050.severity = suggestion

# Use conditional delegate call
dotnet_diagnostic.IDE1005.severity = suggestion

# 'var' preferences
dotnet_diagnostic.IDE0007.severity = warning
dotnet_diagnostic.IDE0008.severity = warning

# Use expression body for constructors
dotnet_diagnostic.IDE0021.severity = suggestion

# Use expression body for methods
dotnet_diagnostic.IDE0022.severity = suggestion

# Use expression body for operators
dotnet_diagnostic.IDE0023.severity = suggestion
dotnet_diagnostic.IDE0024.severity = suggestion

# Use expression body for properties
dotnet_diagnostic.IDE0025.severity = suggestion

# Use expression body for indexers
dotnet_diagnostic.IDE0026.severity = suggestion

# Use expression body for accessors
dotnet_diagnostic.IDE0027.severity = suggestion

# Use expression body for lambdas
dotnet_diagnostic.IDE0053.severity = suggestion

# Use expression body for local functions
dotnet_diagnostic.IDE0061.severity = suggestion

# Use pattern matching to avoid 'as' followed by a 'null' check
dotnet_diagnostic.IDE0019.severity = warning

# Use pattern matching to avoid 'is' check followed by a cast
dotnet_diagnostic.IDE0020.severity = warning

# Use pattern matching to avoid is check followed by a cast (without variable)
dotnet_diagnostic.IDE0038.severity = warning

# Use switch expression
dotnet_diagnostic.IDE0066.severity = warning

# Use pattern matching
dotnet_diagnostic.IDE0078.severity = warning

# Use pattern matching (not operator)
dotnet_diagnostic.IDE0083.severity = warning

# Use pattern matching (IsNot operator)
dotnet_diagnostic.IDE0084.severity = suggestion
visual_basic_style_prefer_isnot_expression = true : suggestion

# Use block-scoped namespace 
dotnet_diagnostic.IDE0160.severity = suggestion

# Use file-scoped namespace 
dotnet_diagnostic.IDE0161.severity = suggestion

# Simplify property pattern
dotnet_diagnostic.IDE0170.severity = warning

# Use tuple to swap values
dotnet_diagnostic.IDE0180.severity = suggestion

# Unnecessary lambda expression
dotnet_diagnostic.IDE0200.severity = warning

# Convert to top-level statements
dotnet_diagnostic.IDE0210.severity = warning

# Convert to 'Program.Main' style program 
dotnet_diagnostic.IDE0211.severity = suggestion

# Add explicit cast in foreach loop
dotnet_diagnostic.IDE0220.severity = error

# Use UTF-8 string literal
dotnet_diagnostic.IDE0230.severity = warning

# Nullable directive is redundant
dotnet_diagnostic.IDE0240.severity = error

# Nullable directive is unnecessary
dotnet_diagnostic.IDE0241.severity = error

# Struct can be made 'readonly'
dotnet_diagnostic.IDE0250.severity = warning

# Member can be made 'readonly'
dotnet_diagnostic.IDE0251.severity = warning

# Use pattern matching
dotnet_diagnostic.IDE0260.severity = warning

# Null check can be simplified
dotnet_diagnostic.IDE0270.severity = warning

# Use 'nameof'
dotnet_diagnostic.IDE0280.severity = error

# Use primary constructor
dotnet_diagnostic.IDE0290.severity = none

# Add braces
dotnet_diagnostic.IDE0011.severity = error

# Use simple 'using' statement
dotnet_diagnostic.IDE0063.severity = suggestion

# 'using' directive placement
dotnet_diagnostic.IDE0065.severity = error

# Require file header
dotnet_diagnostic.IDE0073.severity = warning
file_header_template = unset

# Fix formatting
dotnet_diagnostic.IDE0055.severity = warning

# Organize usings
dotnet_separate_import_directive_groups = false

# Naming rule violation
dotnet_diagnostic.IDE1006.severity = warning

# Use collection expression for empty 
dotnet_diagnostic.IDE0301.severity = warning

# Nouveaux analyseurs MsTest https://codewithfrenchy.com/posts/mise-a-jour-mstest/

# MSTEST0004 - PublicTypeShouldBeTestClassAnalyzer
dotnet_diagnostic.MSTEST0004.severity = warning

# MSTEST0006 - AvoidExpectedExceptionAttributeAnalyzer
dotnet_diagnostic.MSTEST0006.severity = warning

# MSTEST0015 - TestMethodShouldNotBeIgnored
dotnet_diagnostic.MSTEST0015.severity = warning

# MSTEST0016 - TestClassShouldHaveTestMethod
dotnet_diagnostic.MSTEST0016.severity = warning

# MSTEST0019 - PreferTestInitializeOverConstructorAnalyzer
dotnet_diagnostic.MSTEST0019.severity = warning

# MSTEST0021 - PreferDisposeOverTestCleanupAnalyzer
dotnet_diagnostic.MSTEST0021.severity = warning

# MSTEST0025 - PreferAssertFailOverAlwaysFalseConditionsAnalyzer
dotnet_diagnostic.MSTEST0025.severity = warning

# MSTEST0002 - TestClassShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0002.severity = warning

# MSTEST0003 - TestMethodShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0003.severity = warning

# MSTEST0005 - TestContextShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0005.severity = warning

# MSTEST0007 - UseAttributeOnTestMethodAnalyzer
dotnet_diagnostic.MSTEST0007.severity = warning

# MSTEST0008 - TestInitializeShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0008.severity = warning

# MSTEST0009 - TestCleanupShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0009.severity = warning

# MSTEST0010 - ClassInitializeShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0010.severity = warning

# MSTEST0011 - ClassCleanupShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0011.severity = warning

# MSTEST0012 - AssemblyInitializeShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0012.severity = warning

# MSTEST0013 - AssemblyCleanupShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0013.severity = warning

# MSTEST0014 - DataRowShouldBeValidAnalyzer
dotnet_diagnostic.MSTEST0014.severity = warning

# MSTEST0017 - AssertionArgsShouldBePassedInCorrectOrder
dotnet_diagnostic.MSTEST0017.severity = warning

# MSTEST0023 - DoNotNegateBooleanAssertionAnalyzer
dotnet_diagnostic.MSTEST0023.severity = warning

# MSTEST0024 - DoNotStoreStaticTestContextAnalyzer
dotnet_diagnostic.MSTEST0024.severity = warning

# MSTEST0026 - AssertionArgsShouldAvoidConditionalAccessRuleId
dotnet_diagnostic.MSTEST0026.severity = warning

csharp_using_directive_placement = outside_namespace:suggestion
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_namespace_declarations = file_scoped:suggestion
csharp_style_prefer_method_group_conversion = true:suggestion
csharp_style_prefer_top_level_statements = true:suggestion
csharp_style_prefer_primary_constructors = false:none
csharp_prefer_system_threading_lock = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_unbound_generic_type_in_nameof = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_prefer_static_local_function = true:suggestion
csharp_prefer_static_anonymous_function = true:suggestion
dotnet_diagnostic.CA1062.severity = none
dotnet_diagnostic.CA2007.severity = none
dotnet_diagnostic.CA1515.severity = none
dotnet_diagnostic.CA2227.severity = none
dotnet_diagnostic.CA1056.severity = none
dotnet_diagnostic.CA1002.severity = none
dotnet_diagnostic.CA1725.severity = none